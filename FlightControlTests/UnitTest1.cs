using FlightControlWeb.Controllers;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Extensions.Caching.Memory;
using Newtonsoft.Json;
using Microsoft.AspNetCore.Mvc.ModelBinding.Binders;
using Newtonsoft.Json.Serialization;
using FlightControlWeb.Model;
using System.IO;
using System.Net.Http;
using System.Collections.Generic;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Threading.Tasks;
using System.Web;
using Microsoft.Extensions.Primitives;

namespace FlightControlTests
{
    [TestClass]
    public class UnitTest1
    {
        [TestMethod]
        public void CheckFlights()          
        {
            // Create new cache memory and it's keys.
            var cache = new Microsoft.Extensions.Caching.Memory.
                MemoryCache(new MemoryCacheOptions());
            List<Server> serversList = new List<Server>();
            List<string> keysList = new List<string>();
            Dictionary<string, string> serverOf = new Dictionary<string, string>();
            cache.Set("servers", serversList);
            cache.Set("keys", keysList);
            cache.Set("serverOfIds", serverOf);

            // Check Post method of flight plans.
            FlightPlanController fpController = new FlightPlanController(cache)
            {
                ControllerContext = new ControllerContext
                {
                    HttpContext = new DefaultHttpContext()
                }
            };
            FlightPlan fp = new FlightPlan();
            // Fill flightPlan fields for posting it.
            fp.Passengers = 200;
            fp.CompanyName = "SwissAir";
            fp.InitialLocation = new Location();
            fp.InitialLocation.Longitude = 35;
            fp.InitialLocation.Latitude = 32;
            fp.InitialLocation.DateTime = DateTime.UtcNow;
            fp.Segments = new List<Segment>();
            Segment seg = new Segment();
            seg.Longitude = 36;
            seg.Latitude = 33;
            seg.TimespanSeconds = 650;
            fp.Segments.Add(seg);
            // Post the preapared flightPlan.
            ActionResult resp = fpController.Post(fp);
            ObjectResult res = resp as ObjectResult;
            // Check the status code of the response and check it equals 
            // to the flight plan which was sent.
            Assert.AreEqual(res.StatusCode, 201);
            Assert.AreEqual(res.Value, fp);
            var iter = fpController.HttpContext.Response.Headers.Values.GetEnumerator();
            iter.MoveNext();
            // Get the interal flight id.
            string internalFlightId = iter.Current.ToArray()[0];
            
            // Check Post method of servers.
            ServersController serverController = new ServersController(cache);
            Server testServer = new Server();
            testServer.Id = "test";
            testServer.Url = "http://www.testServer.com/";
            // Post the prepared server.
            resp = serverController.Post(testServer);
            res = resp as ObjectResult;
            // Check the status code of the response and check it equals 
            // to the server which was sent.
            Assert.AreEqual(res.StatusCode, 201);
            Assert.AreEqual(res.Value, testServer);

            // Inject fake MessegeHandler to HttpClient.
            // Create new HttpClient and override it's response method with a stub one.
            HttpClient client = new HttpClient(new HttpMessageHandlerStub());
            // Check get method of flights.
            FlightsController flightController = new FlightsController(cache, client)
            {
                ControllerContext = new ControllerContext
                {
                    HttpContext = new DefaultHttpContext()
                }
            }; 
            // Add sync_all to query.
            flightController.HttpContext.Request.QueryString = new QueryString("?sync_all");
            Task<ActionResult<List<Flight>>> respFlights = flightController.Get(DateTime.UtcNow);
            res = respFlights.Result.Result as ObjectResult;
            Assert.AreEqual(res.StatusCode, 200);
            // Check that we get two flights- 
            // the first one is the one was sent earlier in this test.
            // the second one is a fake external flight which was generated by the stub.
            Assert.AreEqual(((List<Flight>)res.Value).Count, 2);
            Flight internalFlight = ((List<Flight>)res.Value)[0];
            Flight externalFlight = ((List<Flight>)res.Value)[1];
            Assert.AreEqual(internalFlight.FlightId, internalFlightId);
            Assert.AreEqual(internalFlight.IsExternal, false);
            Assert.AreEqual(externalFlight.FlightId, "FP00000000");
            Assert.AreEqual(externalFlight.IsExternal, true);
        }
    }

}
